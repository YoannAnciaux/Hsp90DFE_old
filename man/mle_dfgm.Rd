% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mle_function.R
\name{mle_dfgm}
\alias{mle_dfgm}
\title{MLE on the DFE for FGM}
\source{
\itemize{
  \item Tenaillon, O. (2014). The utility of Fisher's geometric model in
  evolutionary genetics. Annual review of ecology, evolution, and systematics,
  45, 179-201.
  \item Martin, G., & Lenormand, T. (2015). The fitness effect of mutations
  across environments: Fisher's geometrical model with multiple optima.
  Evolution, 69(6), 1433-1447.
 }
}
\usage{
mle_dfgm(s, model = "Martin", start, method = "NM", ...)
}
\arguments{
\item{s}{Vector of real numbers. Quantiles of the density. The density is 0
if \eqn{s \ge so}.}

\item{model}{String. "Martin" performs the mle on the density of the DFE from
Martin & Lenormand (2015) (see \code{\link{dfgm_martin}}). "Tenaillon" performs
the mle on the density of the DFE from Tenaillon (2014) (see \code{\link{dfgm_tenaillon}}).
Default "Martin".}

\item{start}{Numeric vector (named). Used as starting values in \code{\link{maxLik}{maxLik}}.
It must contains the parameters for the chosen \code{model}:
\itemize{
  \item{"Martin"}{ c(n = #, lambda = #, so = #)}
  \item{"Tenaillon"}{ c(n = #, lambda = #, so = #, alpha = #, Q = #)}
}}

\item{method}{String. Maximisation method. See \code{\link{maxLik}{maxLik}}.
Default "NM".}

\item{...}{See \code{\link{maxLik}{maxLik}} all the possible parameters}
}
\value{
Returns a list of 2 elements. First element \code{mle} is the output of
\code{\link[maxLik]{maxLik}}. The second element \code{dist_estim} is a tibble
of the discretized density with the estimated parameter, for 100 values in the
range corresponding to \code{s}.
}
\description{
Maximum likelihood estimation (mle) for the parameters of the DFE density for
different form of the FGM.
}
\examples{
#### model : "Martin" ####
# Parameters
nsample <- 1000; n <- 4; lambda <- 0.5; so <- 1; alpha <- 1/2; Q <- 2;
# Simulated data
s <- rfgm(nsample, n, lambda, so, alpha, Q)
# Noise on initial parameters
initial_parameter <- c(n = ceiling(abs(rnorm(1, n))),
                       lambda = abs(rnorm(1, lambda, sd = 0.1)),
                       so = abs(rnorm(1, n)))
# Constraints on parameters (not applioed for all methods see maxLik in maxLik package)
consA <- rbind(c(1, 0, 0),
               c(0, 1, 0),
               c(0, 0, 1))
consB <- c(0, 0, -max(s))
# MLE
res <- mle_dfgm(s, model = "Martin", start = initial_parameter,
                method = "NM", constraints = list(ineqA = consA, ineqB = consB))
# Plot
ggplot2::ggplot() +
  ggplot2::geom_density(aes(x = s)) +
  ggplot2::geom_line(aes(x = res$dist_estim$s, y = res$dist_estim$density), color = "red")

#### model : "Tenaillon" ####
# Parameters
nsample <- 1000; n <- 4; lambda <- 0.5; so <- 1; alpha <- 1/2; Q <- 2;
# Simulated data
s <- rfgm(nsample, n, lambda, so, alpha, Q)
# Noise on initial parameters
initial_parameter <- c(n = ceiling(abs(rnorm(1, n))),
                       lambda = abs(rnorm(1, lambda, sd = 0.1)),
                       so = abs(rnorm(1, n)),
                       alpha = alpha,
                       Q = abs(rnorm(1, Q)))
# Constraints on parameters (not applioed for all methods see maxLik in maxLik package)
consA <- rbind(c(1, 0, 0, 0, 0),
               c(0, 1, 0, 0, 0),
               c(0, 0, 1, 0, 0),
               c(0, 0, 0, 1, 0),
               c(0, 0, 0, 0, 1))
consB <- c(0, 0, -max(s), 0, 0)
# MLE
res <- mle_dfgm(s, model = "Tenaillon", start = initial_parameter,
                method = "NM", constraints = list(ineqA = consA, ineqB = consB))
# Plot
ggplot2::ggplot() +
  ggplot2::geom_density(aes(x = s)) +
  ggplot2::geom_line(aes(x = res$dist_estim$s, y = res$dist_estim$density), color = "red")

}
\seealso{
\code{\link{dfgm_martin}}, \code{\link{dfgm_tenaillon}},
\code{\link{maxLik}{maxLik}}.
}
